<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__usb__type__c__port__controller__api" kind="group">
    <compoundname>usb_type_c_port_controller_api</compoundname>
    <title>USB Type-C Port Controller API</title>
    <innerclass refid="structtcpc__chip__info" prot="public">tcpc_chip_info</innerclass>
    <innerclass refid="structtcpc__driver__api" prot="public">tcpc_driver_api</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__usb__type__c__port__controller__api_1ga4687047910cad0dd970bbd28adcf22ed" prot="public" static="no" strong="no">
        <type></type>
        <name>tcpc_alert</name>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda30b8a2c88cc2309849efa9d478271a3f" prot="public">
          <name>TCPC_ALERT_CC_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CC status changed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22edabbce6e484dc5373597097a664a6b5af4" prot="public">
          <name>TCPC_ALERT_POWER_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Power status changed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda57eedbbbb9b1d899e1607e25c2799eeb" prot="public">
          <name>TCPC_ALERT_MSG_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receive Buffer register changed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda61c51ceb776d0432c657f6c16d5595e0" prot="public">
          <name>TCPC_ALERT_HARD_RESET_RECEIVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Received Hard Reset message </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22edadff8e9cab783e22eedad2971baae77ec" prot="public">
          <name>TCPC_ALERT_TRANSMIT_MSG_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SOP* message transmission not successful </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda302c30d41b09b4bf1949ce0c945c71fe" prot="public">
          <name>TCPC_ALERT_TRANSMIT_MSG_DISCARDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset or SOP* message transmission not sent due to an incoming receive message </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda642e2b837d88dc983177546a06d938b2" prot="public">
          <name>TCPC_ALERT_TRANSMIT_MSG_SUCCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset or SOP* message transmission successful </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda64f5af2ef616a1adf90ff3549a114a66" prot="public">
          <name>TCPC_ALERT_VBUS_ALARM_HI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A high-voltage alarm has occurred </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22edac44bb12fb7bd9de2f49af7d5f72744b0" prot="public">
          <name>TCPC_ALERT_VBUS_ALARM_LO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A low-voltage alarm has occurred </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22edacd3a5188b6be126dfd00a4676e2a768e" prot="public">
          <name>TCPC_ALERT_FAULT_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A fault has occurred. Read the FAULT_STATUS register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22edaefb353c046fa8346a4736d02a3003752" prot="public">
          <name>TCPC_ALERT_RX_BUFFER_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TCPC RX buffer has overflowed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda8aa0d4566f11e6079f59500ac03929cd" prot="public">
          <name>TCPC_ALERT_VBUS_SNK_DISCONNECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The TCPC in Attached.SNK state has detected a sink disconnect </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda449d3f9271aa42feb43e54a1f36114eb" prot="public">
          <name>TCPC_ALERT_BEGINNING_MSG_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receive buffer register changed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda284b478e32999fd923ba3064088274a9" prot="public">
          <name>TCPC_ALERT_EXTENDED_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Extended status changed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22eda4356cb85ef371e72badad22110172e25" prot="public">
          <name>TCPC_ALERT_EXTENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An extended interrupt event has occurred. Read the alert_extended register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1gga4687047910cad0dd970bbd28adcf22edac5675390dfba5276227ff8d2be783992" prot="public">
          <name>TCPC_ALERT_VENDOR_DEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A vendor defined alert has been detected </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TCPC Alert bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="38" column="1" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="38" bodyend="77"/>
      </memberdef>
      <memberdef kind="enum" id="group__usb__type__c__port__controller__api_1gafd8253dfa6abc80d0717b17271ed8916" prot="public" static="no" strong="no">
        <type></type>
        <name>tcpc_status_reg</name>
        <enumvalue id="group__usb__type__c__port__controller__api_1ggafd8253dfa6abc80d0717b17271ed8916aaf41a51cc8e4c849780af463ea63a0c4" prot="public">
          <name>TCPC_CC_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CC Status register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1ggafd8253dfa6abc80d0717b17271ed8916aa42f110436df796f5cfdadab921aac7f" prot="public">
          <name>TCPC_POWER_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Power Status register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1ggafd8253dfa6abc80d0717b17271ed8916a14723bbaaae32413e2399159a6def440" prot="public">
          <name>TCPC_FAULT_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Fault Status register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1ggafd8253dfa6abc80d0717b17271ed8916afe72a3bc04d7f92bd74e754129e99c6d" prot="public">
          <name>TCPC_EXTENDED_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Extended Status register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1ggafd8253dfa6abc80d0717b17271ed8916a5e15cc2aae46edf6b7e0f5316b37a9db" prot="public">
          <name>TCPC_EXTENDED_ALERT_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Extended Alert Status register </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__usb__type__c__port__controller__api_1ggafd8253dfa6abc80d0717b17271ed8916a45f424f2f0e126085d3e49e0cc4d7c61" prot="public">
          <name>TCPC_VENDOR_DEFINED_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Vendor Defined Status register </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TCPC Status register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="82" column="1" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="82" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__usb__type__c__port__controller__api_1gaf633b9bdc7bd342c461c996ff3a646f2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* tcpc_vbus_cb_t) (const struct device *dev, int *vbus_meas)</definition>
        <argsstring>)(const struct device *dev, int *vbus_meas)</argsstring>
        <name>tcpc_vbus_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="118" column="8" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__usb__type__c__port__controller__api_1gaea89d79b0e15b647f4aa1f32f4f1ddd0" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* tcpc_discharge_vbus_cb_t) (const struct device *dev, bool enable)</definition>
        <argsstring>)(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_discharge_vbus_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="119" column="8" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__usb__type__c__port__controller__api_1ga88ffc0a13061f46810dfdcaab7c7caf2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* tcpc_vconn_control_cb_t) (const struct device *dev, bool enable)</definition>
        <argsstring>)(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_vconn_control_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="120" column="8" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__usb__type__c__port__controller__api_1ga5f42fa12f90d34961eeeb67c0dc4f925" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* tcpc_alert_handler_cb_t) (const struct device *dev, void *data, enum tcpc_alert alert)</definition>
        <argsstring>)(const struct device *dev, void *data, enum tcpc_alert alert)</argsstring>
        <name>tcpc_alert_handler_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="121" column="9" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga6dfd68915ffe093058f6187b770a2436" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_rp</definition>
        <argsstring>(enum tc_cc_voltage_state cc)</argsstring>
        <name>tcpc_is_cc_rp</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc</declname>
        </param>
        <briefdescription>
<para>Returns whether the sink has detected a Rp resistor on the other side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="171" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga0db896e395812603a03548b8faac6791" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_open</definition>
        <argsstring>(enum tc_cc_voltage_state cc1, enum tc_cc_voltage_state cc2)</argsstring>
        <name>tcpc_is_cc_open</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Returns true if both CC lines are completely open. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="180" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gaa0d2059c3a53df986150141f73b9a98a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_snk_dbg_acc</definition>
        <argsstring>(enum tc_cc_voltage_state cc1, enum tc_cc_voltage_state cc2)</argsstring>
        <name>tcpc_is_cc_snk_dbg_acc</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Returns true if we detect the port partner is a snk debug accessory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="189" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga03849a7a4fd7f468b18838c443d1ecd8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_src_dbg_acc</definition>
        <argsstring>(enum tc_cc_voltage_state cc1, enum tc_cc_voltage_state cc2)</argsstring>
        <name>tcpc_is_cc_src_dbg_acc</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Returns true if we detect the port partner is a src debug accessory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="198" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga153054be89d5f21148fe3ee750c718ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_audio_acc</definition>
        <argsstring>(enum tc_cc_voltage_state cc1, enum tc_cc_voltage_state cc2)</argsstring>
        <name>tcpc_is_cc_audio_acc</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Returns true if the port partner is an audio accessory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="207" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gab4e9cc812679cf8cb0189f73a28d7cd2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_at_least_one_rd</definition>
        <argsstring>(enum tc_cc_voltage_state cc1, enum tc_cc_voltage_state cc2)</argsstring>
        <name>tcpc_is_cc_at_least_one_rd</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Returns true if the port partner is presenting at least one Rd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="216" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga91c3c40ea82ce5a081918183d8b76c06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_is_cc_only_one_rd</definition>
        <argsstring>(enum tc_cc_voltage_state cc1, enum tc_cc_voltage_state cc2)</argsstring>
        <name>tcpc_is_cc_only_one_rd</name>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref></type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Returns true if the port partner is presenting Rd on only one CC line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="225" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gabc50daa9cc713b1d0e340007e3850ca8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_init</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>tcpc_init</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Initializes the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="239" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga66ab7a9f3cd1b80cd5bc8e99040c5627" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_get_cc</definition>
        <argsstring>(const struct device *dev, enum tc_cc_voltage_state *cc1, enum tc_cc_voltage_state *cc2)</argsstring>
        <name>tcpc_get_cc</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref> *</type>
          <declname>cc1</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga64e32ec2da97f70fd5b96975317cb92c" kindref="member">tc_cc_voltage_state</ref> *</type>
          <declname>cc2</declname>
        </param>
        <briefdescription>
<para>Reads the status of the CC lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc1</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the CC1 status is written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc2</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the CC2 status is written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="261" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="261" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gad3d6c83080da4bfa481c97c24de9f139" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tcpc_set_vbus_measure_cb</definition>
        <argsstring>(const struct device *dev, tcpc_vbus_cb_t vbus_cb)</argsstring>
        <name>tcpc_set_vbus_measure_cb</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__usb__type__c__port__controller__api_1gaf633b9bdc7bd342c461c996ff3a646f2" kindref="member">tcpc_vbus_cb_t</ref></type>
          <declname>vbus_cb</declname>
        </param>
        <briefdescription>
<para>Sets a callback that can measure the value of VBUS if the TCPC is unable to or the system is configured in a way that does not use the VBUS measurement and detection capabilities of the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback is called in tcpc_check_vbus_level and tcpc_get_vbus functions if vbus_cb isn&apos;t NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vbus_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to callback function that returns a voltage measurement </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="287" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="287" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga7df0b3745c525f1cc0bf0325d745965f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tcpc_set_discharge_vbus_cb</definition>
        <argsstring>(const struct device *dev, tcpc_discharge_vbus_cb_t discharge_vbus_cb)</argsstring>
        <name>tcpc_set_discharge_vbus_cb</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__usb__type__c__port__controller__api_1gaea89d79b0e15b647f4aa1f32f4f1ddd0" kindref="member">tcpc_discharge_vbus_cb_t</ref></type>
          <declname>discharge_vbus_cb</declname>
        </param>
        <briefdescription>
<para>Sets a callback that can discharge VBUS if the TCPC is unable to or the system is configured in a way that does not use the discharge VBUS capabilities of the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback is called in tcpc_set_discharge_vbus functions if discharge_vbus_cb isn&apos;t NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>discharge_vbus_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to callback function that discharges VBUS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="310" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="310" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga082b09cd530983b1969e922ea1dedbe6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool tcpc_check_vbus_level</definition>
        <argsstring>(const struct device *dev, enum tc_vbus_level level)</argsstring>
        <name>tcpc_check_vbus_level</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga015455a6c5620dfc96cfb713bbb72161" kindref="member">tc_vbus_level</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Checks if VBUS is at a particular level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level voltage to check against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if VBUS is at the level voltage </para>
</simplesect>
<simplesect kind="return"><para>false if VBUS is not at that level voltage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="331" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="331" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga730866ea93305ae736adcc77d0ec3490" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_get_vbus</definition>
        <argsstring>(const struct device *dev, int *vbus_meas)</argsstring>
        <name>tcpc_get_vbus</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vbus_meas</declname>
        </param>
        <briefdescription>
<para>Reads and returns VBUS measured in mV. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the TCPC to measure VBUS if possible or calls the callback function set by tcpc_set_vbus_measure_callback. In the event that the TCPC can measure VBUS and the VBUS callback measuring function is set, this function usess the callback function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vbus_meas</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the measured VBUS voltage is stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="357" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="357" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga3958eac0cc0b9b2ac782e0cdb235036c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_select_rp_value</definition>
        <argsstring>(const struct device *dev, enum tc_rp_value rp)</argsstring>
        <name>tcpc_select_rp_value</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga4e0eec97f7c5c97b87eff9561deea2d5" kindref="member">tc_rp_value</ref></type>
          <declname>rp</declname>
        </param>
        <briefdescription>
<para>Sets the value of CC pull up resistor used when operating as a Source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the Pull-Up Resistor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="378" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="378" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga25a110be90977e768623f3a0c9a222d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_get_rp_value</definition>
        <argsstring>(const struct device *dev, enum tc_rp_value *rp)</argsstring>
        <name>tcpc_get_rp_value</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga4e0eec97f7c5c97b87eff9561deea2d5" kindref="member">tc_rp_value</ref> *</type>
          <declname>rp</declname>
        </param>
        <briefdescription>
<para>Gets the value of the CC pull up resistor used when operating as a Source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the value of the Pull-Up Resistor is stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="400" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="400" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gac5737d02caa2b9e649b469bcd648440f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_cc</definition>
        <argsstring>(const struct device *dev, enum tc_cc_pull pull)</argsstring>
        <name>tcpc_set_cc</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga0200c820510eb786f3ca30a9b5f7aada" kindref="member">tc_cc_pull</ref></type>
          <declname>pull</declname>
        </param>
        <briefdescription>
<para>Sets the CC pull resistor and sets the role as either Source or Sink. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pull</parametername>
</parameternamelist>
<parameterdescription>
<para>The pull resistor to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="421" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="421" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gaa608f2c6627c4a9c3039f0ec1b238bbc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tcpc_set_vconn_cb</definition>
        <argsstring>(const struct device *dev, tcpc_vconn_control_cb_t vconn_cb)</argsstring>
        <name>tcpc_set_vconn_cb</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__usb__type__c__port__controller__api_1ga88ffc0a13061f46810dfdcaab7c7caf2" kindref="member">tcpc_vconn_control_cb_t</ref></type>
          <declname>vconn_cb</declname>
        </param>
        <briefdescription>
<para>Sets a callback that can enable or disable VCONN if the TCPC is unable to or the system is configured in a way that does not use the VCONN control capabilities of the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback is called in the tcpc_set_vconn function if vconn_cb isn&apos;t NULL</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vconn_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the callback function that controls vconn </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="442" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="442" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga247f0ea91249753d6f5eefe006617e41" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_vconn</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_vconn</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables or disables VCONN. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the TCPC to measure VCONN if possible or calls the callback function set by tcpc_set_vconn_cb</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>VCONN is enabled when true, it&apos;s disabled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="467" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="467" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga8d30c961335f62faa33aa7d842422da0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_roles</definition>
        <argsstring>(const struct device *dev, enum tc_power_role power_role, enum tc_data_role data_role)</argsstring>
        <name>tcpc_set_roles</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1gaa6dda0612045b5f55b9d8ba63d2b9f9d" kindref="member">tc_power_role</ref></type>
          <declname>power_role</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1ga6b98bbe238e62cfd5531688494a63de2" kindref="member">tc_data_role</ref></type>
          <declname>data_role</declname>
        </param>
        <briefdescription>
<para>Sets the Power and Data Role of the PD message header. </para>
        </briefdescription>
        <detaileddescription>
<para>This function only needs to be called once per data / power role change</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_role</parametername>
</parameternamelist>
<parameterdescription>
<para>current power role </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_role</parametername>
</parameternamelist>
<parameterdescription>
<para>current data role</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="492" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="492" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga1ab0e57f1b3954d474e4dae307aa11b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool tcpc_is_rx_pending_msg</definition>
        <argsstring>(const struct device *dev, enum pd_packet_type *type)</argsstring>
        <name>tcpc_is_rx_pending_msg</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__power__delivery_1gad2df13a24f0365198d37b10af608376b" kindref="member">pd_packet_type</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Tests if a received Power Delivery message is pending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where message type is written. Can be NULL</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if message is pending, else false </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="516" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="516" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga875559886f0793117c5f7eccea3979b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_receive_data</definition>
        <argsstring>(const struct device *dev, struct pd_msg *buf)</argsstring>
        <name>tcpc_receive_data</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structpd__msg" kindref="compound">pd_msg</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Retrieves the Power Delivery message from the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the pd_buf pointer is written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Greater or equal to 0 is the number of bytes received </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-EFAULT on buf being NULL </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="540" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="540" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga905176a77ff127f4df8f6a4f2c61a1b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_rx_enable</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_rx_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables the reception of SOP* message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable Power Delivery when true, else it&apos;s disabled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="564" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="564" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga53f0207ecb63011c6dfc3c298a841ed4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_cc_polarity</definition>
        <argsstring>(const struct device *dev, enum tc_cc_polarity polarity)</argsstring>
        <name>tcpc_set_cc_polarity</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c_1gac5b4b58840c9b076a869a5816ba100db" kindref="member">tc_cc_polarity</ref></type>
          <declname>polarity</declname>
        </param>
        <briefdescription>
<para>Sets the polarity of the CC lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Polarity of the cc line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="585" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="585" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga8bf8fd202d582a4cc179a0fc4aff35e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_transmit_data</definition>
        <argsstring>(const struct device *dev, struct pd_msg *msg)</argsstring>
        <name>tcpc_transmit_data</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structpd__msg" kindref="compound">pd_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Transmits a Power Delivery message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Power Delivery message to transmit</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="607" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="607" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga91eef7084b523f1991e000f0592b8cbd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_dump_std_reg</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>tcpc_dump_std_reg</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Dump a set of TCPC registers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="629" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="629" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga75f0dc246dac576f14c5ac51b45fd489" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_alert_handler_cb</definition>
        <argsstring>(const struct device *dev, tcpc_alert_handler_cb_t handler, void *data)</argsstring>
        <name>tcpc_set_alert_handler_cb</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__usb__type__c__port__controller__api_1ga5f42fa12f90d34961eeeb67c0dc4f925" kindref="member">tcpc_alert_handler_cb_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sets the alert function that&apos;s called when an interrupt is triggered due to an alert bit. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function enables the particular alert bit</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function called when the bit is set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data passed to the callback</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="654" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="654" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga41e81b8f83e06934a5eb984ae6f980ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_get_status_register</definition>
        <argsstring>(const struct device *dev, enum tcpc_status_reg reg, int32_t *status)</argsstring>
        <name>tcpc_get_status_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c__port__controller__api_1gafd8253dfa6abc80d0717b17271ed8916" kindref="member">tcpc_status_reg</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Gets a status register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The status register to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer where the status is stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="678" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="678" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga00170b754d78d8eb7da24abd7d533e42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_clear_status_register</definition>
        <argsstring>(const struct device *dev, enum tcpc_status_reg reg, uint32_t mask)</argsstring>
        <name>tcpc_clear_status_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c__port__controller__api_1gafd8253dfa6abc80d0717b17271ed8916" kindref="member">tcpc_status_reg</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Clears a TCPC status register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The status register to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of the status register to clear. A status bit is cleared when it&apos;s set to 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="704" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="704" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga0d1868d555e99877e062fb7135d9db8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_mask_status_register</definition>
        <argsstring>(const struct device *dev, enum tcpc_status_reg reg, uint32_t mask)</argsstring>
        <name>tcpc_mask_status_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__usb__type__c__port__controller__api_1gafd8253dfa6abc80d0717b17271ed8916" kindref="member">tcpc_status_reg</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Sets the mask of a TCPC status register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The status register to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of the status register to mask. The status bit is masked if it&apos;s 0, else it&apos;s unmasked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="730" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="730" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga0a04473fe22efe368b6b93f4a481d490" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_discharge_vbus</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_discharge_vbus</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables discharge TypeC VBUS on Source / Sink disconnect and power role swap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>The TypeC VBUS is discharged on disconnect or power role swap when true</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="756" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="756" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga9dbf0d49edd810f75775272e84e42b0a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_enable_auto_discharge_disconnect</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_enable_auto_discharge_disconnect</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>TCPC automatically discharge TypeC VBUS on Source / Sink disconnect an power role swap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>The TCPC automatically discharges VBUS on disconnect or power role swap</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="780" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="780" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga01687aa218b25ba137e994a2a55bce23" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_debug_accessory</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_debug_accessory</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Manual control of TCPC DebugAccessory control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable Debug Accessory when true, else it&apos;s disabled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="803" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="803" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gaaa38e56e6bc8c41e936d8ed70aaa8a23" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_debug_detach</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>tcpc_set_debug_detach</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Detach from a debug connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="825" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="825" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gaa06e156bef46ff3f70cc8c302ddf0a4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_drp_toggle</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_drp_toggle</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable TCPC auto dual role toggle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto dual role toggle is active when true, else it&apos;s disabled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="847" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="847" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gaa5e5faf410d7189d861bf0ae888bdf06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool tcpc_get_snk_ctrl</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>tcpc_get_snk_ctrl</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Queries the current sinking state of the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if sinking power </para>
</simplesect>
<simplesect kind="return"><para>false if not sinking power </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="868" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="868" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga12142e950ad17b868b0f933eea0c266e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool tcpc_get_src_ctrl</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>tcpc_get_src_ctrl</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Queries the current sourcing state of the TCPC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if sourcing power </para>
</simplesect>
<simplesect kind="return"><para>false if not sourcing power </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="889" column="20" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="889" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gaccc728a1f27c59a163a5c0a221ab7c18" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_bist_test_mode</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_bist_test_mode</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Controls the BIST Mode of the TCPC. It disables RX alerts while the mode is active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>The TCPC enters BIST TEST Mode when true</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="912" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="912" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga894d24140f8675b4f48d759c27f52076" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_get_chip_info</definition>
        <argsstring>(const struct device *dev, struct tcpc_chip_info *chip_info)</argsstring>
        <name>tcpc_get_chip_info</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structtcpc__chip__info" kindref="compound">tcpc_chip_info</ref> *</type>
          <declname>chip_info</declname>
        </param>
        <briefdescription>
<para>Gets the TCPC firmware version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chip_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to TCPC chip info where the version is stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="935" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="935" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1ga961a4dc393d58dc44ea19a62c943ed48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_set_low_power_mode</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_set_low_power_mode</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Instructs the TCPC to enter or exit low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>The TCPC enters low power mode when true, else it exits it</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="958" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="958" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__type__c__port__controller__api_1gab0f1f5d47c1e2b8ee9eb3d7875a0051e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int tcpc_sop_prime_enable</definition>
        <argsstring>(const struct device *dev, bool enable)</argsstring>
        <name>tcpc_sop_prime_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables the reception of SOP Prime messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Runtime device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Can receive SOP Prime messages when true, else it can not</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EIO on failure </para>
</simplesect>
<simplesect kind="return"><para>-ENOSYS if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usbc/usbc_tcpc.h" line="981" column="19" bodyfile="include/drivers/usbc/usbc_tcpc.h" bodystart="981" bodyend="992"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>USB Type-C Port Controller API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
